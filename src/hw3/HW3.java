/*
* To change this license header, choose License Headers in Project Properties.
* To change this template file, choose Tools | Templates
* and open the template in the editor.
*/
package hw3;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.Comparator;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author yuxia
 */
public class HW3 extends javax.swing.JFrame {
    //private String[] genres;
    private ArrayList<String> genres;
    Connection connection;
    Statement statement;
    /**
     * Creates new form HW3
     */
    public HW3() throws SQLException {
        initComponents();
        System.out.println("initializing components");
        try {
            Class.forName("oracle.jdbc.driver.OracleDriver");
            System.out.println("Driver is registered");
        } catch (ClassNotFoundException cnfe)
        {
            System.out.println("Error loading driver: " + cnfe);
        }
        //2. define db url
        String dbUrl = "jdbc:oracle:thin:coen@//localhost:1521/xe";
        
        //3. establish connection
        connection = DriverManager.getConnection(dbUrl, "coen", "pass");
        statement = connection.createStatement();
        //init genres selection table 
        String getGenre = "SELECT DISTINCT GENRE FROM GENRES";
        statement.execute(getGenre);
        genres = new ArrayList<String>();
        ResultSet result = statement.getResultSet();
        if (result != null){
            while(result.next()){
                genres.add(result.getString(1));
            }
        }
        //genres = new String[]{"Animation","Comedy","Mystery","Sci-Fi","Children","Musical","Thriller","Film-Noir","Adventure","Romance",
            //"Drama","Horror","Western","Action","IMAX","Fantasy","Documentary","War", "Short", "Crime"};
        DefaultTableModel model;
        model = (DefaultTableModel) genreSelection.getModel();
        for(int i = 0; i < genres.size(); i++){
            model.addRow(new Object[]{genres.get(i), false});
        }//done init genres election table
        
        //init year selection
        String getYear = "SELECT DISTINCT YEAR FROM MOVIES";
        statement.execute(getYear);
        ArrayList<String> years = new ArrayList<>();
        result = statement.getResultSet();
        if (result != null){
            while(result.next()){
                years.add(result.getString(1));
            }
        }
        Collections.sort(years, new Comparator<String>() {
            @Override
            public int compare(String s1, String s2) {
                return s1.compareToIgnoreCase(s2);
            }
        });
        for (int i = 0; i < years.size(); i++){
            afterYearCombo.addItem(years.get(i));
            beforeYearCombo.addItem(years.get(i));
        }
        beforeYearCombo.setSelectedIndex(years.size()-1);
        
    }
    
    
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        andOrPanel = new javax.swing.JPanel();
        andOrLabel = new javax.swing.JLabel();
        andOrComboBox = new javax.swing.JComboBox<>();
        countryButton = new javax.swing.JButton();
        jScrollPane7 = new javax.swing.JScrollPane();
        actorSelection = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        countrySelection = new javax.swing.JTable();
        jScrollPane1 = new javax.swing.JScrollPane();
        tagSelection = new javax.swing.JTable();
        jScrollPane8 = new javax.swing.JScrollPane();
        directorSelection = new javax.swing.JTable();
        genreYearPanel = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        genreSelection = new javax.swing.JTable();
        afterYearCombo = new javax.swing.JComboBox<>();
        beforeYearCombo = new javax.swing.JComboBox<>();
        afterYearLabel = new javax.swing.JLabel();
        beforeYearLabel = new javax.swing.JLabel();
        genreYearButton = new javax.swing.JButton();
        castButton = new javax.swing.JButton();
        jScrollPane9 = new javax.swing.JScrollPane();
        movieTable = new javax.swing.JTable();
        tagButton = new javax.swing.JButton();
        jScrollPane4 = new javax.swing.JScrollPane();
        userTable = new javax.swing.JTable();
        showUserButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Movie Search");

        andOrLabel.setText("Search Between Attributes' Values:");

        andOrComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "AND", "OR" }));

        javax.swing.GroupLayout andOrPanelLayout = new javax.swing.GroupLayout(andOrPanel);
        andOrPanel.setLayout(andOrPanelLayout);
        andOrPanelLayout.setHorizontalGroup(
            andOrPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(andOrPanelLayout.createSequentialGroup()
                .addGroup(andOrPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(andOrLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 214, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(andOrPanelLayout.createSequentialGroup()
                        .addGap(79, 79, 79)
                        .addComponent(andOrComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        andOrPanelLayout.setVerticalGroup(
            andOrPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(andOrPanelLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(andOrLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(andOrComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        countryButton.setText("Set Country");
        countryButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                countryButtonActionPerformed(evt);
            }
        });

        actorSelection.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Actors", ""
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Boolean.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane7.setViewportView(actorSelection);
        if (actorSelection.getColumnModel().getColumnCount() > 0) {
            actorSelection.getColumnModel().getColumn(1).setPreferredWidth(15);
        }

        countrySelection.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Country", ""
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Boolean.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane2.setViewportView(countrySelection);
        if (countrySelection.getColumnModel().getColumnCount() > 0) {
            countrySelection.getColumnModel().getColumn(1).setPreferredWidth(20);
        }

        tagSelection.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Tag Id", "Tag Value", ""
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.Boolean.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tagSelection);
        if (tagSelection.getColumnModel().getColumnCount() > 0) {
            tagSelection.getColumnModel().getColumn(0).setPreferredWidth(20);
            tagSelection.getColumnModel().getColumn(2).setPreferredWidth(15);
        }

        directorSelection.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Directors", ""
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Boolean.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane8.setViewportView(directorSelection);
        if (directorSelection.getColumnModel().getColumnCount() > 0) {
            directorSelection.getColumnModel().getColumn(1).setPreferredWidth(15);
        }

        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("Movie Year");

        genreSelection.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Genre", ""
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Boolean.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane3.setViewportView(genreSelection);
        if (genreSelection.getColumnModel().getColumnCount() > 0) {
            genreSelection.getColumnModel().getColumn(1).setPreferredWidth(20);
        }

        afterYearLabel.setText("After");

        beforeYearLabel.setText("Before");

        genreYearButton.setText("Set Year & Genre");
        genreYearButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                genreYearButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout genreYearPanelLayout = new javax.swing.GroupLayout(genreYearPanel);
        genreYearPanel.setLayout(genreYearPanelLayout);
        genreYearPanelLayout.setHorizontalGroup(
            genreYearPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
            .addGroup(genreYearPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(genreYearPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(genreYearButton, javax.swing.GroupLayout.DEFAULT_SIZE, 153, Short.MAX_VALUE)
                    .addGroup(genreYearPanelLayout.createSequentialGroup()
                        .addGroup(genreYearPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(afterYearLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(genreYearPanelLayout.createSequentialGroup()
                                .addComponent(beforeYearLabel)
                                .addGap(0, 0, Short.MAX_VALUE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(genreYearPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(beforeYearCombo, 0, 81, Short.MAX_VALUE)
                            .addComponent(afterYearCombo, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap())
        );
        genreYearPanelLayout.setVerticalGroup(
            genreYearPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, genreYearPanelLayout.createSequentialGroup()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 303, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(genreYearPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(afterYearCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(afterYearLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(genreYearPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(beforeYearCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(beforeYearLabel))
                .addGap(51, 51, 51)
                .addComponent(genreYearButton, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        castButton.setText("Set Cast");
        castButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                castButtonActionPerformed(evt);
            }
        });

        movieTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "MovieID", "Title", "Year", "Country", "RTavgScore", "RT#rating", ""
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Boolean.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane9.setViewportView(movieTable);
        if (movieTable.getColumnModel().getColumnCount() > 0) {
            movieTable.getColumnModel().getColumn(6).setPreferredWidth(15);
        }

        tagButton.setText("Set Tag");
        tagButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tagButtonActionPerformed(evt);
            }
        });

        userTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "User ID"
            }
        ));
        jScrollPane4.setViewportView(userTable);

        showUserButton.setText("Show Users");
        showUserButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showUserButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(genreYearPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(countryButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jScrollPane8, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(castButton, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 280, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 261, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(tagButton, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(102, 102, 102)
                        .addComponent(andOrPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(50, 50, 50))))
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane9, javax.swing.GroupLayout.PREFERRED_SIZE, 782, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(45, 45, 45)
                .addComponent(showUserButton, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 192, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jScrollPane8, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                            .addComponent(jScrollPane2)
                            .addComponent(jScrollPane1)
                            .addComponent(jScrollPane4))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(countryButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(castButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(tagButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(andOrPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(genreYearPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane9, javax.swing.GroupLayout.DEFAULT_SIZE, 174, Short.MAX_VALUE)
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addGap(51, 51, 51)
                        .addComponent(showUserButton, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void countryButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_countryButtonActionPerformed
        try {
            
            
            //Insert int countryresult with all previous selections
            //first clear previous result
            statement.execute("DELETE FROM COUNTRYRESULT");
            String countryRQuery = "INSERT INTO COUNTRYRESULT SELECT DISTINCT MOVIEID FROM COUNTRIES WHERE MOVIEID IN (SELECT * FROM GENRERESULT)";
            int rows = countrySelection.getRowCount();
            String andOr = (String)andOrComboBox.getSelectedItem();
            String prefix = "";
            String selection = "(";
            for (int i = 0; i < rows; i++){
                if ((Boolean)countrySelection.getValueAt(i, 1)){
                    String selectedItem = (String)countrySelection.getValueAt(i, 0);
                    System.out.println(selectedItem + " selected " + prefix);
                    selection += prefix + " SELECT DISTINCT MOVIEID FROM COUNTRIES WHERE  COUNTRY =  " + "'" + selectedItem + "'";
                    prefix = andOr.equals("AND") ? "INTERSECT" : "UNION";
                }
            }
            if (selection.length() > 1){
                countryRQuery += " INTERSECT " + selection + ")";
            }
            statement.execute(countryRQuery); 
            
            //add actors and directors to their tables, may use a sorting later
            statement.execute("SELECT DISTINCT ACTORNAME FROM ACTORS WHERE MOVIEID IN (SELECT * FROM COUNTRYRESULT)");
            DefaultTableModel model;
            model = (DefaultTableModel) actorSelection.getModel();
            model.setRowCount(0);
            ResultSet actorResult = statement.getResultSet();
            if (actorResult != null){
                while(actorResult.next()){
                    String actorName = actorResult.getString(1);
                    model.addRow(new Object[]{actorName, false});
                }
            } //done adding actor names
            
            statement.execute("SELECT DISTINCT DIRECTORNAME FROM DIRECTORS WHERE MOVIEID IN (SELECT * FROM COUNTRYRESULT)");
            model = (DefaultTableModel) directorSelection.getModel();
            model.setRowCount(0);
            ResultSet directorResult = statement.getResultSet();
            if (actorResult != null){
                while(directorResult.next()){
                    String directorName = directorResult.getString(1);
                    model.addRow(new Object[]{directorName, false});
                }
            } //done adding director names
            
        } catch (SQLException ex) {
            Logger.getLogger(HW3.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_countryButtonActionPerformed

    private void genreYearButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_genreYearButtonActionPerformed
        try {
            System.out.println("getting country information");
            int rows = genreSelection.getRowCount();
            System.out.println("number rows: " + rows);
            String[] genre = new String[rows];
            Boolean[] selected = new Boolean[rows];
            //clear query result by year and genre constraints
            String clearYearResult1 = "DELETE FROM YEARRESULT";
            System.out.println(clearYearResult1);
            statement.execute(clearYearResult1);
            System.out.println("yearresult deleted");
            statement.execute("DELETE FROM GENRERESULT");
            System.out.println("genreresult deleted");

            //make query for current selection and save into table YEARRESULT
            String afterYear = (String)afterYearCombo.getSelectedItem();
            String beforeYear = (String)beforeYearCombo.getSelectedItem();
            String yearQuery = "INSERT INTO YEARRESULT SELECT DISTINCT ID FROM MOVIES WHERE YEAR >= " + afterYear + "AND YEAR <= " + beforeYear;
            statement.execute(yearQuery);
            System.out.println("yearQuery executed");

            //then query with different selected genres
            String genreQuery = "INSERT INTO GENRERESULT SELECT DISTINCT MOVIEID FROM GENRES WHERE MOVIEID IN (SELECT * FROM YEARRESULT)";
            String andOr = (String)andOrComboBox.getSelectedItem();
            String prefix = "";
            String selection = "(";
            //build genreQuery
            //build addtional constraints
            for (int i = 0; i < rows; i++){
                if ((Boolean)genreSelection.getValueAt(i, 1)){
                    String selectedItem = (String)genreSelection.getValueAt(i, 0);
                    System.out.println(selectedItem + " selected " + prefix);                   
                    selection += prefix + " SELECT DISTINCT MOVIEID FROM GENRES WHERE GENRE =  " + "'" + selectedItem + "'";
                    prefix = andOr.equals("AND") ? "INTERSECT" : "UNION";
                }
            }
            if (selection.length() > 1){
                genreQuery += " INTERSECT " + selection + ")";
            }
            System.out.println(genreQuery);
            statement.execute(genreQuery); // insert all the movieid match year and genre constraints

            //get all the countries from genreresult
            String getCountries = "SELECT DISTINCT COUNTRY FROM COUNTRIES WHERE MOVIEID IN (SELECT * FROM GENRERESULT)";
            statement.execute(getCountries);
            ArrayList<String> countries = new ArrayList<>();
            ResultSet genreResult = statement.getResultSet();
            if (genreResult != null){
                while(genreResult.next()){
                    countries.add(genreResult.getString(1));
                }
            }
            //add countries to table
            DefaultTableModel model;
            model = (DefaultTableModel) countrySelection.getModel();
            model.setRowCount(0);
            for(int i = 0; i < countries.size(); i++){
                model.addRow(new Object[]{countries.get(i), false});
            }//done init country selection table

        } catch (SQLException ex) {
            Logger.getLogger(HW3.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_genreYearButtonActionPerformed

    private void castButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_castButtonActionPerformed
        try {
            statement.execute("DELETE FROM CASTRESULT");
            String castRQuery = "INSERT INTO CASTRESULT SELECT DISTINCT MOVIEID FROM ACTORS WHERE MOVIEID IN (SELECT * FROM COUNTRYRESULT) ";
            String andOr = (String)andOrComboBox.getSelectedItem();
            String prefix = "";
            String selection = "(";
            //build genreQuery
            //build addtional constraints
            int actorRows = actorSelection.getRowCount();
            for (int i = 0; i < actorRows; i++){
                if ((Boolean)actorSelection.getValueAt(i, 1)){
                    String selectedItem = (String)actorSelection.getValueAt(i, 0);
                    System.out.println(selectedItem + " selected " + prefix);
                    selection += prefix + " SELECT DISTINCT MOVIEID FROM ACTORS WHERE ACTORNAME =  " + "'" + selectedItem + "'";
                    prefix = andOr.equals("AND") ? "INTERSECT" : "UNION";
                }
            }
            if (selection.length() > 1){
                castRQuery += " INTERSECT " + selection + ")";
            }
            
            //add in directors selection
            castRQuery += " INTERSECT SELECT DISTINCT MOVIEID FROM DIRECTORS WHERE MOVIEID IN (SELECT * FROM COUNTRYRESULT) ";
            String selection2 = "(";
            prefix = "";
            int directorRows = directorSelection.getRowCount();
            for (int i = 0; i < directorRows; i++){
                if ((Boolean)directorSelection.getValueAt(i, 1)){
                    String selectedItem = (String)directorSelection.getValueAt(i, 0);
                    System.out.println(selectedItem + " selected " + prefix);
                    //prefix = andOr.equals("AND") ? "INTERSECT" : "UNION";
                    selection2 += prefix + " SELECT DISTINCT MOVIEID FROM DIRECTORS WHERE DIRECTORNAME =  " + "'" + selectedItem + "'";
                }
            }
            if (selection2.length() > 1){
                castRQuery += " INTERSECT " + selection2 + ")";
            }
            System.out.println(castRQuery);
            statement.execute(castRQuery); //insert values into castresult
            
            //get tag ids and values, then insert into table
            statement.execute("SELECT DISTINCT T.ID, T.VALUE FROM TAGS T, MTAGS M WHERE T.ID = M.TAGID AND M.MOVIEID IN (SELECT * FROM CASTRESULT)");
            DefaultTableModel model;
            model = (DefaultTableModel) tagSelection.getModel();
            model.setRowCount(0);
            ResultSet tagResult = statement.getResultSet();
            if (tagResult != null){
                while(tagResult.next()){
                    String tagId = tagResult.getString(1);
                    String tagValue =  tagResult.getString(2);
                    model.addRow(new Object[]{tagId, tagValue, false});
                }
            } //done adding tags
            
            
        } catch (SQLException ex) {
            Logger.getLogger(HW3.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_castButtonActionPerformed

    private void tagButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tagButtonActionPerformed
        try {
            //after tags are listed;
            statement.execute("DELETE FROM TAGRESULT");
            String tagRQuery = "INSERT INTO TAGRESULT SELECT DISTINCT MOVIEID FROM MTAGS WHERE MOVIEID IN (SELECT * FROM CASTRESULT) ";
            String andOr = (String)andOrComboBox.getSelectedItem();
            String prefix = "";
            String selection = "(";
            int actorRows = tagSelection.getRowCount();
            for (int i = 0; i < actorRows; i++){
                if ((Boolean)tagSelection.getValueAt(i, 2)){
                    String selectedItem = (String)tagSelection.getValueAt(i, 0);
                    System.out.println(selectedItem + " selected " + prefix);
                    selection += prefix + " SELECT DISTINCT MOVIEID FROM MTAGS WHERE TAGID =  " + "'" + selectedItem + "'";
                    prefix = andOr.equals("AND") ? "INTERSECT" : "UNION";
                }
            }
            if (selection.length() > 1){
               tagRQuery += " INTERSECT " + selection + ")";
            }
            statement.execute(tagRQuery);
            
            statement.execute("SELECT DISTINCT M.ID, M.TITLE, M.YEAR, C.COUNTRY, M.RTAUDIENCERATING, M.RTAUDIENCENUMRATINGS FROM MOVIES M, COUNTRIES C "
                    + "WHERE M.ID = C.MOVIEID AND M.ID IN (SELECT * FROM TAGRESULT)");
            DefaultTableModel model;
            model = (DefaultTableModel) movieTable.getModel();
            model.setRowCount(0);
            ResultSet movieResult = statement.getResultSet();
            if (movieResult != null){
                while(movieResult.next()){
                    String id = movieResult.getString(1);
                    String title =  movieResult.getString(2);
                    String year = movieResult.getString(3);
                    String country = movieResult.getString(4);
                    String rtRating = movieResult.getString(5);
                    String rtNumR = movieResult.getString(6);
                    System.out.println(id+title+year+country + rtRating+rtNumR);
                    model.addRow(new Object[]{id, title, year, country, rtRating, rtNumR, false});
                }
            } //done adding movie
            
        } catch (SQLException ex) {
            Logger.getLogger(HW3.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_tagButtonActionPerformed

    private void showUserButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showUserButtonActionPerformed
        try {
            ArrayList<String> mid = new ArrayList<>();
            ArrayList<String> tagid = new ArrayList<>();
            //add candidates mid to arraylist
            int movieRows = movieTable.getRowCount();
            for(int i = 0; i < movieRows; i++){
                if((Boolean)movieTable.getValueAt(i, 6)){
                    mid.add((String)movieTable.getValueAt(i, 0));
                }
            }
            //add candidates tagid to arraylist
            int tagRows = tagSelection.getRowCount();
            for(int i = 0; i < tagRows; i++){
                if((Boolean)tagSelection.getValueAt(i, 2)){
                    tagid.add((String)tagSelection.getValueAt(i, 0));
                }
            }
            
            //build query for userid
            String userQuery = "SELECT DISTINCT USERID FROM USERTAG WHERE ";
            String midSelection = "(";
            String tagidSelection = "(";
            
            String prefix = "";
            for (int i = 0; i < mid.size(); i++){
                midSelection += prefix + "MOVIEID =  " + "'" + mid.get(i) + "'";
                prefix = " OR ";
            }
            if (midSelection.length() > 1){
                userQuery += midSelection + ")";
            } else {
                userQuery += "MOVIEID = 'blahblahblah'"; // DUMMY CONSTRAINT TO return no result if no movie is selected;
            }
            
            prefix = "";
            for (int i = 0; i < tagid.size(); i++){
                tagidSelection += prefix + " TAGID =  " + "'" + tagid.get(i) + "'";
                prefix = " OR ";
            }
            if (tagidSelection.length() > 1){
                userQuery += " AND " + tagidSelection + ")";
            } else {
                userQuery += " AND TAGID = 'blahblahblah'"; // return no result if no tag is selected;
            }
            System.out.println(userQuery);
            statement.execute(userQuery);
            
            DefaultTableModel model;
            model = (DefaultTableModel) userTable.getModel();
            model.setRowCount(0);
            ResultSet userResult = statement.getResultSet();
            if (userResult != null){
                while(userResult.next()){
                    String id = userResult.getString(1);
                    model.addRow(new Object[]{id});
                }
            } //done adding userTable
            
        } catch (SQLException ex) {        
            Logger.getLogger(HW3.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }//GEN-LAST:event_showUserButtonActionPerformed
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
        * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
        */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(HW3.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(HW3.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(HW3.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(HW3.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    new HW3().setVisible(true);
                } catch (SQLException ex) {
                    Logger.getLogger(HW3.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable actorSelection;
    private javax.swing.JComboBox<String> afterYearCombo;
    private javax.swing.JLabel afterYearLabel;
    private javax.swing.JComboBox<String> andOrComboBox;
    private javax.swing.JLabel andOrLabel;
    private javax.swing.JPanel andOrPanel;
    private javax.swing.JComboBox<String> beforeYearCombo;
    private javax.swing.JLabel beforeYearLabel;
    private javax.swing.JButton castButton;
    private javax.swing.JButton countryButton;
    private javax.swing.JTable countrySelection;
    private javax.swing.JTable directorSelection;
    private javax.swing.JTable genreSelection;
    private javax.swing.JButton genreYearButton;
    private javax.swing.JPanel genreYearPanel;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JScrollPane jScrollPane8;
    private javax.swing.JScrollPane jScrollPane9;
    private javax.swing.JTable movieTable;
    private javax.swing.JButton showUserButton;
    private javax.swing.JButton tagButton;
    private javax.swing.JTable tagSelection;
    private javax.swing.JTable userTable;
    // End of variables declaration//GEN-END:variables
}
